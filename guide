# üöÄ Guide d'installation et d'utilisation - TTS Medical API

## üìÅ 1. Organisation des fichiers

Voici comment organiser les fichiers dans votre projet :

```
tts-medical-management-api/
‚îú‚îÄ‚îÄ src/                    # Votre code TypeScript existant
‚îú‚îÄ‚îÄ dist/                   # G√©n√©r√© apr√®s build
‚îú‚îÄ‚îÄ package.json           # Votre fichier existant
‚îú‚îÄ‚îÄ Dockerfile             # ‚Üê √Ä cr√©er (voir art√©fact "Dockerfile optimis√©")
‚îú‚îÄ‚îÄ docker-compose.yml     # ‚Üê √Ä cr√©er (voir art√©fact "Docker Compose")
‚îú‚îÄ‚îÄ .dockerignore          # ‚Üê √Ä cr√©er (voir art√©fact ".dockerignore")
‚îú‚îÄ‚îÄ test-docker.sh         # ‚Üê √Ä cr√©er (voir art√©fact "Scripts de test")
‚îú‚îÄ‚îÄ Makefile              # ‚Üê √Ä cr√©er (voir art√©fact "Makefile") 
‚îî‚îÄ‚îÄ README-Docker.md      # ‚Üê Documentation (optionnel)
```

## üîß 2. Installation √©tape par √©tape

### √âtape 1 : Cr√©er les fichiers Docker

```bash
# Dans le dossier racine de votre projet
cd tts-medical-management-api

# Cr√©er le Dockerfile
# Copiez le contenu de l'art√©fact "Dockerfile optimis√© pour Node.js 22"
nano Dockerfile

# Cr√©er le docker-compose.yml
# Copiez le contenu de l'art√©fact "Docker Compose simplifi√©"
nano docker-compose.yml

# Cr√©er le .dockerignore
# Copiez le contenu de l'art√©fact ".dockerignore optimis√©"
nano .dockerignore
```

### √âtape 2 : Cr√©er les scripts de test

```bash
# Cr√©er le script de test
# Copiez le contenu de l'art√©fact "Scripts de test"
nano test-docker.sh

# Rendre le script ex√©cutable
chmod +x test-docker.sh
```

### √âtape 3 : Cr√©er le Makefile (optionnel mais recommand√©)

```bash
# Cr√©er le Makefile
# Copiez le contenu de l'art√©fact "Makefile"
nano Makefile
```

### √âtape 4 : Mettre √† jour votre package.json

```bash
# Ajoutez ces scripts √† votre package.json existant
# Voir l'art√©fact "Scripts package.json optimis√©s"
```

## üèÉ‚Äç‚ôÇÔ∏è 3. Utilisation rapide

### Option A : Avec le Makefile (RECOMMAND√â)

```bash
# Voir toutes les commandes disponibles
make help

# Test complet (recommand√© en premier)
make test

# D√©veloppement
make dev          # API sur http://localhost:3000

# Production (test local)
make prod         # API sur http://localhost:3001

# Les deux en m√™me temps
make both

# Voir les logs
make logs

# Arr√™ter tout
make stop

# Nettoyer compl√®tement
make clean
```

### Option B : Avec Docker Compose directement

```bash
# Build et d√©marrage d√©veloppement
docker-compose up -d api-dev
# ‚Üí API disponible sur http://localhost:3000

# Build et d√©marrage production
docker-compose up -d api-prod  
# ‚Üí API disponible sur http://localhost:3001

# Voir les logs
docker-compose logs -f api-dev
docker-compose logs -f api-prod

# Arr√™ter
docker-compose down
```

### Option C : Avec le script de test

```bash
# Test complet automatique
./test-docker.sh
```

## üîç 4. Processus de test recommand√©

### Premier test (obligatoire)
```bash
# 1. Test complet pour v√©rifier que tout fonctionne
make test
# ou
./test-docker.sh
```

### Tests de d√©veloppement
```bash
# 2. Lancer l'environnement de d√©veloppement
make dev

# 3. V√©rifier que votre API r√©pond
curl http://localhost:3000/
# ou ouvrir dans le navigateur

# 4. Voir les logs en temps r√©el
make logs-dev
```

### Tests de production
```bash
# 5. Lancer l'environnement de production
make prod

# 6. V√©rifier la production
curl http://localhost:3001/

# 7. Comparer les performances
make status
```

## üõ†Ô∏è 5. Commandes de debugging

```bash
# Entrer dans le conteneur de d√©veloppement
make shell-dev
# ou
docker-compose exec api-dev sh

# Entrer dans le conteneur de production
make shell-prod

# Inspecter les images
make inspect-dev
make inspect-prod

# Voir la taille des images
make size

# Test rapide de d√©marrage
make quick-test
```

## üìä 6. Monitoring et logs

```bash
# Statut des conteneurs
make status

# Logs en temps r√©el
make logs           # Tous les logs
make logs-dev       # D√©veloppement uniquement
make logs-prod      # Production uniquement

# Stats des ressources
docker stats
```

## üö® 7. D√©pannage

### Probl√®me : "Permission denied"
```bash
chmod +x test-docker.sh
chmod +x Makefile
```

### Probl√®me : "Port already in use"
```bash
# Voir qui utilise le port
lsof -i :3000
lsof -i :3001

# Ou changer les ports dans docker-compose.yml
```

### Probl√®me : "Build failed"
```bash
# Nettoyer compl√®tement
make clean
docker system prune -a

# Rebuild
make build
```

### Probl√®me : "API ne r√©pond pas"
```bash
# Voir les logs pour d√©bugger
make logs-dev

# V√©rifier que votre API a bien une route
# Ajouter dans votre server.ts :
app.get('/health', (req, res) => res.json({ status: 'OK' }));
```

## üìù 8. Workflow recommand√©

### Pour le d√©veloppement quotidien :
```bash
make dev        # D√©marrer
make logs-dev   # Surveiller
# ... d√©velopper ...
make stop       # Arr√™ter
```

### Avant de pousser en production :
```bash
make test       # Test complet
make prod       # Test production local
make deploy-check  # V√©rifications finales
```

### Pour nettoyer :
```bash
make clean      # Nettoyage complet
```

## üéØ 9. Points importants

1. **Premier lancement** : Toujours faire `make test` en premier
2. **Route sant√©** : Ajoutez `app.get('/health', ...)` dans votre API
3. **Logs** : Surveillez toujours les logs avec `make logs`
4. **Ports** : Dev sur 3000, Prod sur 3001
5. **Nettoyage** : `make clean` en cas de probl√®me

## üîó 10. Liens utiles

- D√©veloppement : http://localhost:3000
- Production : http://localhost:3001  
- Portainer (monitoring) : http://localhost:9000
- Logs : `make logs`
- Aide : `make help`



Comment utiliser ces fichiers :
1. D√©veloppement
bash# Lancer en mode d√©veloppement (avec hot reload)
docker-compose up api-dev

# Votre API sera disponible sur http://localhost:3000
2. Test de production
bash# Lancer en mode production
docker-compose up api-prod

# Votre API sera disponible sur http://localhost:3001
3. Commandes utiles
bash# Build et lancer les deux environnements
docker-compose up -d

# Voir les logs
docker-compose logs -f api-dev
docker-compose logs -f api-prod

# Arr√™ter tout
docker-compose down

# Nettoyer compl√®tement
docker-compose down -v
docker system prune -f
4. Test rapide
bash# Build l'image de production
docker build --target production -t tts-api:prod .

# Tester l'image
docker run -p 8080:3000 tts-api:prod
Structure des fichiers :

Dockerfile : 3 stages (base, development, production)
docker-compose.yml : 2 services (dev sur port 3000, prod sur port 3001)
.dockerignore : Exclut les fichiers inutiles du build

Ces fichiers sont maintenant simples, clairs et pr√™ts √† utiliser avec votre projet TypeScript !




Utilisation rapide :
bash# Voir toutes les commandes
make help

# D√©veloppement
make dev          # http://localhost:3000

# Production  
make prod         # http://localhost:3001

# Les deux
make both

# Test rapide
make test

# Logs
make logs

# Nettoyage
make clean
Test de base :
bash# 1. Cr√©er les fichiers dans votre projet
# 2. Tester le build
make build

# 3. Lancer en dev
make dev

# 4. V√©rifier que √ßa fonctionne
curl http://localhost:3000

# 5. Tester la prod
make prod
curl http://localhost:3001
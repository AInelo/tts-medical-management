name: Deploy TTS Medical API to VPS

on:
  push:
    branches: [main]
    paths:
      - 'api/**'
      - '.github/workflows/**'
      - 'nginx/**'  # Ajout√© pour surveiller les changements de config NGINX
  pull_request:
    branches: [main]
    paths:
      - 'api/**'

env:
  IMAGE_NAME: tts-medical-api
  CONTAINER_NAME: tts-medical-backend
  PORT: 5100  # CORRIG√â: Port correct selon votre app Node.js

jobs:
  # Job de test avant d√©ploiement
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'

      - name: üì¶ Install dependencies
        working-directory: ./api
        run: npm ci

      - name: üèóÔ∏è Build TypeScript
        working-directory: ./api
        run: npm run build

      - name: üß™ Run tests
        working-directory: ./api
        run: npm test

      - name: üê≥ Test Docker build
        working-directory: ./api
        run: |
          docker build --target production -t ${{ env.IMAGE_NAME }}:test .
          docker run --rm -d --name test-container -p 5100:5100 ${{ env.IMAGE_NAME }}:test
          sleep 5
          docker stop test-container || true

  # Job de d√©ploiement
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üìÇ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_URMAPHA_PRIVATE_SSH }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: üß™ Test SSH Connection
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '‚úÖ SSH connection successful'"

      - name: üì¶ Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          echo "üöÄ [1/8] Pr√©paration du d√©ploiement..."
          PROJECT_DIR=~/tts-medical-management
          
          # Cr√©er le r√©pertoire et cloner/mettre √† jour le projet
          echo "üì¶ [2/8] Mise √† jour du code source..."
          if [ ! -d "$PROJECT_DIR" ]; then
            git clone https://github.com/AInelo/tts-medical-management.git $PROJECT_DIR
          else
            cd $PROJECT_DIR && git pull origin main
          fi
          
          cd $PROJECT_DIR/api
          
          # Backup de l'ancien conteneur (au cas o√π)
          echo "üíæ [3/8] Sauvegarde de l'ancien conteneur..."
          if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
            docker commit ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Build de la nouvelle image avec cache
          echo "üê≥ [4/8] Construction de l'image Docker..."
          docker build \
            --target production \
            --tag ${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.IMAGE_NAME }}:$(date +%Y%m%d-%H%M%S) \
            .
          
          # Test de l'image avant d√©ploiement
          echo "üß™ [5/8] Test de la nouvelle image..."
          docker run --rm --name ${{ env.CONTAINER_NAME }}-test \
            -e NODE_ENV=production \
            -e PORT=${{ env.PORT }} \
            ${{ env.IMAGE_NAME }}:latest node -e "console.log('‚úÖ Image test successful')" || {
            echo "‚ùå Test de l'image √©chou√©"
            exit 1
          }
          
          # Arr√™t propre de l'ancien conteneur
          echo "üõë [6/8] Arr√™t de l'ancien conteneur..."
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            docker stop ${{ env.CONTAINER_NAME }} || true
            sleep 2
          fi
          docker rm ${{ env.CONTAINER_NAME }} || true
          
          # D√©marrage du nouveau conteneur
          echo "üöÄ [7/8] D√©marrage du nouveau conteneur..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:${{ env.PORT }} \
            --restart unless-stopped \
            --memory="512m" \
            --cpus="0.5" \
            -e NODE_ENV=production \
            -e PORT=${{ env.PORT }} \
            ${{ env.IMAGE_NAME }}:latest
          
          # V√©rification que le conteneur fonctionne
          echo "‚úÖ [8/8] V√©rification du d√©ploiement..."
          sleep 15
          
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "‚úÖ Conteneur d√©marr√© avec succ√®s"
            docker logs --tail=20 ${{ env.CONTAINER_NAME }}
          else
            echo "‚ùå √âchec du d√©marrage du conteneur"
            docker logs ${{ env.CONTAINER_NAME }} || true
            exit 1
          fi
          
          # Test de connectivit√© avec vos routes API
          echo "üîç Test de connectivit√© sur l'API..."
          sleep 5
          if curl -f -s --max-time 10 http://localhost:${{ env.PORT }}/api/ > /dev/null 2>&1; then
            echo "‚úÖ API accessible sur /api/"
          else
            echo "‚ö†Ô∏è  Test de connectivit√© - v√©rification manuelle n√©cessaire"
            echo "Status du conteneur: $(docker ps --filter name=${{ env.CONTAINER_NAME }} --format 'table {{.Status}}')"
          fi
          
          echo "üéâ D√©ploiement termin√© avec succ√®s !"
          EOF

      - name: üîß Configure NGINX
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'NGINX_EOF'
          PROJECT_DIR=~/tts-medical-management
          
          echo "üîß [1/5] Recherche de la configuration NGINX..."
          
          # V√©rifier plusieurs emplacements possibles pour la config NGINX
          NGINX_CONFIG=""
          if [ -f "$PROJECT_DIR/nginx/tts-medical.conf" ]; then
            NGINX_CONFIG="$PROJECT_DIR/nginx/tts-medical.conf"
            echo "‚úÖ Config trouv√©e dans nginx/tts-medical.conf"
          elif [ -f "$PROJECT_DIR/api/nginx.conf" ]; then
            NGINX_CONFIG="$PROJECT_DIR/api/nginx.conf"
            echo "‚úÖ Config trouv√©e dans api/nginx.conf"
          elif [ -f "$PROJECT_DIR/tts-medical.conf" ]; then
            NGINX_CONFIG="$PROJECT_DIR/tts-medical.conf"
            echo "‚úÖ Config trouv√©e dans tts-medical.conf"
          fi
          
          if [ -n "$NGINX_CONFIG" ]; then
            echo "üîß [2/5] Configuration NGINX trouv√©e: $NGINX_CONFIG"
            
            # Cr√©er les r√©pertoires nginx s'ils n'existent pas
            sudo mkdir -p /etc/nginx/sites-available
            sudo mkdir -p /etc/nginx/sites-enabled
            
            echo "üîß [3/5] Copie de la configuration..."
            # Copier la configuration
            sudo cp "$NGINX_CONFIG" /etc/nginx/sites-available/tts-medical.conf
            
            # Cr√©er le lien symbolique
            sudo ln -sf /etc/nginx/sites-available/tts-medical.conf /etc/nginx/sites-enabled/tts-medical.conf
            
            # Supprimer la config par d√©faut si elle existe
            sudo rm -f /etc/nginx/sites-enabled/default
            
            echo "üß™ [4/5] Test de la configuration NGINX..."
            # Test de la configuration NGINX
            if sudo nginx -t; then
              echo "‚úÖ Configuration NGINX valide"
              sudo systemctl reload nginx
              echo "‚úÖ NGINX recharg√© avec succ√®s"
              
              # V√©rifier le status de NGINX
              if sudo systemctl is-active nginx > /dev/null; then
                echo "‚úÖ [5/5] NGINX est actif et fonctionne"
              else
                echo "‚ùå Probl√®me avec NGINX"
                sudo systemctl status nginx --no-pager -l
              fi
            else
              echo "‚ùå Erreur dans la configuration NGINX"
              sudo nginx -t
              echo "‚ö†Ô∏è  Continuit√© du d√©ploiement sans rechargement NGINX"
            fi
          else
            echo "‚ö†Ô∏è  [2/5] Aucun fichier de configuration NGINX trouv√©"
            echo "üìÇ Contenu du r√©pertoire projet:"
            ls -la $PROJECT_DIR/ 2>/dev/null || echo "R√©pertoire projet non trouv√©"
            if [ -d "$PROJECT_DIR/nginx" ]; then
              echo "üìÇ Contenu du r√©pertoire nginx:"
              ls -la $PROJECT_DIR/nginx/
            fi
            echo "‚ö†Ô∏è  Veuillez cr√©er le fichier nginx/tts-medical.conf dans votre repository"
          fi
          NGINX_EOF

      - name: üßπ Cleanup old images
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'CLEANUP_EOF'
          echo "üßπ Nettoyage des anciennes images..."
          # Garder seulement les 3 derni√®res images
          docker images ${{ env.IMAGE_NAME }} --format "{{.Tag}}" | grep -E '^[0-9]{8}-[0-9]{6}

      - name: üìä Deployment Summary
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'SUMMARY_EOF'
          echo "üìä R√âSUM√â DU D√âPLOIEMENT"
          echo "======================="
          echo "üê≥ Conteneur: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep ${{ env.CONTAINER_NAME }})"
          echo "üíæ Utilisation m√©moire: $(docker stats --no-stream --format '{{.MemUsage}}' ${{ env.CONTAINER_NAME }})"
          echo "üìà CPU: $(docker stats --no-stream --format '{{.CPUPerc}}' ${{ env.CONTAINER_NAME }})"
          echo "üè∑Ô∏è  Image: $(docker images ${{ env.IMAGE_NAME }}:latest --format '{{.Size}}')"
          echo "‚è∞ Temps de d√©marrage: $(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.State.StartedAt}}')"
          echo ""
          echo "üåê URLs √† tester:"
          echo "   - API: http://collection.urmaphalab.com/api/"
          echo "   - HTTPS: https://collection.urmaphalab.com/api/"
          SUMMARY_EOF

      - name: üîî Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ D√©ploiement r√©ussi sur ${{ secrets.VPS_HOST }}"
            echo "üöÄ Application accessible sur le port ${{ env.PORT }}"
          else
            echo "‚ùå √âchec du d√©ploiement"
            exit 1
          fi | sort -r | tail -n +4 | xargs -r -I {} docker rmi ${{ env.IMAGE_NAME }}:{} || true
          
          # Nettoyage g√©n√©ral mais conservateur
          docker system prune -f
          echo "‚úÖ Nettoyage termin√©"
          CLEANUP_EOF

      - name: üìä Deployment Summary
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          echo "üìä R√âSUM√â DU D√âPLOIEMENT"
          echo "======================="
          echo "üê≥ Conteneur: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep ${{ env.CONTAINER_NAME }})"
          echo "üíæ Utilisation m√©moire: $(docker stats --no-stream --format '{{.MemUsage}}' ${{ env.CONTAINER_NAME }})"
          echo "üìà CPU: $(docker stats --no-stream --format '{{.CPUPerc}}' ${{ env.CONTAINER_NAME }})"
          echo "üè∑Ô∏è  Image: $(docker images ${{ env.IMAGE_NAME }}:latest --format '{{.Size}}')"
          echo "‚è∞ Temps de d√©marrage: $(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.State.StartedAt}}')"
          echo ""
          echo "üåê URLs √† tester:"
          echo "   - API: http://collection.urmaphalab.com/api/"
          echo "   - HTTPS: https://collection.urmaphalab.com/api/"
          EOF

      - name: üîî Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ D√©ploiement r√©ussi sur ${{ secrets.VPS_HOST }}"
            echo "üöÄ Application accessible sur le port ${{ env.PORT }}"
          else
            echo "‚ùå √âchec du d√©ploiement"
            exit 1
          fi






# name: Deploy TTS Medical API to VPS

# on:
#   push:
#     branches: [main]
#     paths:
#       - 'api/**'
#       - '.github/workflows/**'
#       - 'nginx/**'  # Ajout√© pour surveiller les changements de config NGINX
#   pull_request:
#     branches: [main]
#     paths:
#       - 'api/**'

# env:
#   IMAGE_NAME: tts-medical-api
#   CONTAINER_NAME: tts-medical-backend
#   PORT: 5100  # CORRIG√â: Port correct selon votre app Node.js

# jobs:
#   # Job de test avant d√©ploiement
#   test:
#     name: üß™ Run Tests
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
    
#     steps:
#       - name: üìÇ Checkout repository
#         uses: actions/checkout@v4

#       - name: üîß Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#           cache: 'npm'
#           cache-dependency-path: 'api/package-lock.json'

#       - name: üì¶ Install dependencies
#         working-directory: ./api
#         run: npm ci

#       - name: üèóÔ∏è Build TypeScript
#         working-directory: ./api
#         run: npm run build

#       - name: üß™ Run tests
#         working-directory: ./api
#         run: npm test

#       - name: üê≥ Test Docker build
#         working-directory: ./api
#         run: |
#           docker build --target production -t ${{ env.IMAGE_NAME }}:test .
#           docker run --rm -d --name test-container -p 5100:5100 ${{ env.IMAGE_NAME }}:test
#           sleep 5
#           docker stop test-container || true

#   # Job de d√©ploiement
#   deploy:
#     name: üöÄ Deploy to VPS
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#       - name: üìÇ Checkout repository
#         uses: actions/checkout@v4

#       - name: üîê Setup SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.VPS_URMAPHA_PRIVATE_SSH }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

#       - name: üß™ Test SSH Connection
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '‚úÖ SSH connection successful'"

#       - name: üì¶ Deploy application
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           set -e
          
#           echo "üöÄ [1/8] Pr√©paration du d√©ploiement..."
#           PROJECT_DIR=~/tts-medical-management
          
#           # Cr√©er le r√©pertoire et cloner/mettre √† jour le projet
#           echo "üì¶ [2/8] Mise √† jour du code source..."
#           if [ ! -d "$PROJECT_DIR" ]; then
#             git clone https://github.com/AInelo/tts-medical-management.git $PROJECT_DIR
#           else
#             cd $PROJECT_DIR && git pull origin main
#           fi
          
#           cd $PROJECT_DIR/api
          
#           # Backup de l'ancien conteneur (au cas o√π)
#           echo "üíæ [3/8] Sauvegarde de l'ancien conteneur..."
#           if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
#             docker commit ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S) || true
#           fi
          
#           # Build de la nouvelle image avec cache
#           echo "üê≥ [4/8] Construction de l'image Docker..."
#           docker build \
#             --target production \
#             --tag ${{ env.IMAGE_NAME }}:latest \
#             --tag ${{ env.IMAGE_NAME }}:$(date +%Y%m%d-%H%M%S) \
#             .
          
#           # Test de l'image avant d√©ploiement
#           echo "üß™ [5/8] Test de la nouvelle image..."
#           docker run --rm --name ${{ env.CONTAINER_NAME }}-test \
#             -e NODE_ENV=production \
#             -e PORT=${{ env.PORT }} \
#             ${{ env.IMAGE_NAME }}:latest node -e "console.log('‚úÖ Image test successful')" || {
#             echo "‚ùå Test de l'image √©chou√©"
#             exit 1
#           }
          
#           # Arr√™t propre de l'ancien conteneur
#           echo "üõë [6/8] Arr√™t de l'ancien conteneur..."
#           if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
#             docker stop ${{ env.CONTAINER_NAME }} || true
#             sleep 2
#           fi
#           docker rm ${{ env.CONTAINER_NAME }} || true
          
#           # D√©marrage du nouveau conteneur
#           echo "üöÄ [7/8] D√©marrage du nouveau conteneur..."
#           docker run -d \
#             --name ${{ env.CONTAINER_NAME }} \
#             -p ${{ env.PORT }}:${{ env.PORT }} \
#             --restart unless-stopped \
#             --memory="512m" \
#             --cpus="0.5" \
#             -e NODE_ENV=production \
#             -e PORT=${{ env.PORT }} \
#             ${{ env.IMAGE_NAME }}:latest
          
#           # V√©rification que le conteneur fonctionne
#           echo "‚úÖ [8/8] V√©rification du d√©ploiement..."
#           sleep 15
          
#           if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
#             echo "‚úÖ Conteneur d√©marr√© avec succ√®s"
#             docker logs --tail=20 ${{ env.CONTAINER_NAME }}
#           else
#             echo "‚ùå √âchec du d√©marrage du conteneur"
#             docker logs ${{ env.CONTAINER_NAME }} || true
#             exit 1
#           fi
          
#           # Test de connectivit√© avec vos routes API
#           echo "üîç Test de connectivit√© sur l'API..."
#           sleep 5
#           if curl -f -s --max-time 10 http://localhost:${{ env.PORT }}/api/ > /dev/null 2>&1; then
#             echo "‚úÖ API accessible sur /api/"
#           else
#             echo "‚ö†Ô∏è  Test de connectivit√© - v√©rification manuelle n√©cessaire"
#             echo "Status du conteneur: $(docker ps --filter name=${{ env.CONTAINER_NAME }} --format 'table {{.Status}}')"
#           fi
          
#           echo "üéâ D√©ploiement termin√© avec succ√®s !"
#           EOF

#       - name: üîß Configure NGINX
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           PROJECT_DIR=~/tts-medical-management
          
#           # V√©rifier plusieurs emplacements possibles pour la config NGINX
#           NGINX_CONFIG=""
#           if [ -f "$PROJECT_DIR/nginx/tts-medical.conf" ]; then
#             NGINX_CONFIG="$PROJECT_DIR/nginx/tts-medical.conf"
#           elif [ -f "$PROJECT_DIR/api/nginx.conf" ]; then
#             NGINX_CONFIG="$PROJECT_DIR/api/nginx.conf"
#           elif [ -f "$PROJECT_DIR/tts-medical.conf" ]; then
#             NGINX_CONFIG="$PROJECT_DIR/tts-medical.conf"
#           fi
          
#           if [ -n "$NGINX_CONFIG" ]; then
#             echo "üîß Configuration NGINX trouv√©e: $NGINX_CONFIG"
            
#             # Cr√©er le r√©pertoire nginx s'il n'existe pas
#             sudo mkdir -p /etc/nginx/sites-available
#             sudo mkdir -p /etc/nginx/sites-enabled
            
#             # Copier la configuration
#             sudo cp "$NGINX_CONFIG" /etc/nginx/sites-available/tts-medical.conf
            
#             # Cr√©er le lien symbolique
#             sudo ln -sf /etc/nginx/sites-available/tts-medical.conf /etc/nginx/sites-enabled/tts-medical.conf
            
#             # Supprimer la config par d√©faut si elle existe
#             sudo rm -f /etc/nginx/sites-enabled/default
            
#             # Test de la configuration NGINX
#             echo "üß™ Test de la configuration NGINX..."
#             if sudo nginx -t; then
#               echo "‚úÖ Configuration NGINX valide"
#               sudo systemctl reload nginx
#               echo "‚úÖ NGINX recharg√© avec succ√®s"
              
#               # V√©rifier le status de NGINX
#               if sudo systemctl is-active nginx > /dev/null; then
#                 echo "‚úÖ NGINX est actif et fonctionne"
#               else
#                 echo "‚ùå Probl√®me avec NGINX"
#                 sudo systemctl status nginx
#               fi
#             else
#               echo "‚ùå Erreur dans la configuration NGINX"
#               sudo nginx -t 2>&1
#               echo "‚ö†Ô∏è  Continuit√© du d√©ploiement sans rechargement NGINX"
#             fi
#           else
#             echo "‚ö†Ô∏è  Aucun fichier de configuration NGINX trouv√©"
#             echo "üìÇ Contenu du r√©pertoire projet:"
#             ls -la $PROJECT_DIR/
#             if [ -d "$PROJECT_DIR/nginx" ]; then
#               echo "üìÇ Contenu du r√©pertoire nginx:"
#               ls -la $PROJECT_DIR/nginx/
#             fi
#           fi
#           EOF

#       - name: üßπ Cleanup old images
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           echo "üßπ Nettoyage des anciennes images..."
#           # Garder seulement les 3 derni√®res images
#           docker images ${{ env.IMAGE_NAME }} --format "{{.Tag}}" | grep -E '^[0-9]{8}-[0-9]{6}$' | sort -r | tail -n +4 | xargs -r -I {} docker rmi ${{ env.IMAGE_NAME }}:{} || true
          
#           # Nettoyage g√©n√©ral mais conservateur
#           docker system prune -f
#           echo "‚úÖ Nettoyage termin√©"
#           EOF

#       - name: üìä Deployment Summary
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           echo "üìä R√âSUM√â DU D√âPLOIEMENT"
#           echo "======================="
#           echo "üê≥ Conteneur: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep ${{ env.CONTAINER_NAME }})"
#           echo "üíæ Utilisation m√©moire: $(docker stats --no-stream --format '{{.MemUsage}}' ${{ env.CONTAINER_NAME }})"
#           echo "üìà CPU: $(docker stats --no-stream --format '{{.CPUPerc}}' ${{ env.CONTAINER_NAME }})"
#           echo "üè∑Ô∏è  Image: $(docker images ${{ env.IMAGE_NAME }}:latest --format '{{.Size}}')"
#           echo "‚è∞ Temps de d√©marrage: $(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.State.StartedAt}}')"
#           echo ""
#           echo "üåê URLs √† tester:"
#           echo "   - API: http://collection.urmaphalab.com/api/"
#           echo "   - HTTPS: https://collection.urmaphalab.com/api/"
#           EOF

#       - name: üîî Notify deployment status
#         if: always()
#         run: |
#           if [ $? -eq 0 ]; then
#             echo "‚úÖ D√©ploiement r√©ussi sur ${{ secrets.VPS_HOST }}"
#             echo "üöÄ Application accessible sur le port ${{ env.PORT }}"
#           else
#             echo "‚ùå √âchec du d√©ploiement"
#             exit 1
#           fi

name: Deploy Backend to VPS

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v3

      - name: 🔐 Setup SSH to VPS
        run: |
          mkdir -p ~/.ssh
          # Décoder la clé privée et la sauvegarder
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY_BASE64 }}" | base64 -d > ~/.ssh/id_rsa
          # Permissions strictes pour la clé privée
          chmod 600 ~/.ssh/id_rsa
          # Vérifier que la clé est valide
          ssh-keygen -l -f ~/.ssh/id_rsa
          # Ajouter l'hôte aux known_hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: 🧪 Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      - name: 🚀 Deploy and run app on VPS
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            echo "[1/6] 📦 Cloner le projet ou mettre à jour..."
            mkdir -p ~/collection_audios && cd ~/collection_audios
            if [ ! -d ".git" ]; then
              # Utilisez HTTPS au lieu de SSH pour le clone initial
              git clone https://github.com/AInelo/tts-medical-management.git .
            else
              git pull
            fi

            echo "[2/6] 🐳 Construire l'image Docker..."
            cd api
            docker build -t collection_audios_backend .

            echo "[3/6] 🧼 Nettoyage ancien conteneur..."
            docker stop collection_audios_backend || true
            docker rm collection_audios_backend || true

            echo "[4/6] 🚀 Lancer le conteneur..."
            docker run -d \
              --name collection_audios_backend \
              -p 3000:3000 \
              --restart unless-stopped \
              collection_audios_backend

            echo "[5/6] 🔧 Configurer NGINX..."
            sudo cp ./urmaphalab/collection.urmapha.com /etc/nginx/sites-available/collection.urmapha.com
            sudo ln -sf /etc/nginx/sites-available/collection.urmapha.com /etc/nginx/sites-enabled/collection.urmapha.com
            sudo nginx -t && sudo systemctl reload nginx

            echo "[6/6] 🔐 Installer SSL avec Certbot..."
            sudo apt update
            sudo apt install -y certbot python3-certbot-nginx
            sudo certbot --nginx --non-interactive --agree-tos --email your@email.com -d collection.urmaphalab.com

            echo "✅ Déploiement terminé avec succès !"
          EOF
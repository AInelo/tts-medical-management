name: Deploy TTS Medical API to VPS

on:
  push:
    branches: [main]
    paths:
      - 'api/**'
      - '.github/workflows/**'
      - 'nginx/**'  # Ajouté pour surveiller les changements de config NGINX
  pull_request:
    branches: [main]
    paths:
      - 'api/**'

env:
  IMAGE_NAME: tts-medical-api
  CONTAINER_NAME: tts-medical-backend
  PORT: 5100  # CORRIGÉ: Port correct selon votre app Node.js

jobs:
  # Job de test avant déploiement
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'

      - name: 📦 Install dependencies
        working-directory: ./api
        run: npm ci

      - name: 🏗️ Build TypeScript
        working-directory: ./api
        run: npm run build

      - name: 🧪 Run tests
        working-directory: ./api
        run: npm test

      - name: 🐳 Test Docker build
        working-directory: ./api
        run: |
          docker build --target production -t ${{ env.IMAGE_NAME }}:test .
          docker run --rm -d --name test-container -p 5100:5100 ${{ env.IMAGE_NAME }}:test
          sleep 5
          docker stop test-container || true

  # Job de déploiement
  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_URMAPHA_PRIVATE_SSH }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: 🧪 Test SSH Connection
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '✅ SSH connection successful'"

      - name: 📦 Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          echo "🚀 [1/8] Préparation du déploiement..."
          PROJECT_DIR=~/tts-medical-management
          
          # Créer le répertoire et cloner/mettre à jour le projet
          echo "📦 [2/8] Mise à jour du code source..."
          if [ ! -d "$PROJECT_DIR" ]; then
            git clone https://github.com/AInelo/tts-medical-management.git $PROJECT_DIR
          else
            cd $PROJECT_DIR && git pull origin main
          fi
          
          cd $PROJECT_DIR/api
          
          # Backup de l'ancien conteneur (au cas où)
          echo "💾 [3/8] Sauvegarde de l'ancien conteneur..."
          if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
            docker commit ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Build de la nouvelle image avec cache
          echo "🐳 [4/8] Construction de l'image Docker..."
          docker build \
            --target production \
            --tag ${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.IMAGE_NAME }}:$(date +%Y%m%d-%H%M%S) \
            .
          
          # Test de l'image avant déploiement
          echo "🧪 [5/8] Test de la nouvelle image..."
          docker run --rm --name ${{ env.CONTAINER_NAME }}-test \
            -e NODE_ENV=production \
            -e PORT=${{ env.PORT }} \
            ${{ env.IMAGE_NAME }}:latest node -e "console.log('✅ Image test successful')" || {
            echo "❌ Test de l'image échoué"
            exit 1
          }
          
          # Arrêt propre de l'ancien conteneur
          echo "🛑 [6/8] Arrêt de l'ancien conteneur..."
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            docker stop ${{ env.CONTAINER_NAME }} || true
            sleep 2
          fi
          docker rm ${{ env.CONTAINER_NAME }} || true
          
          # Démarrage du nouveau conteneur
          echo "🚀 [7/8] Démarrage du nouveau conteneur..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:${{ env.PORT }} \
            --restart unless-stopped \
            --memory="512m" \
            --cpus="0.5" \
            -e NODE_ENV=production \
            -e PORT=${{ env.PORT }} \
            ${{ env.IMAGE_NAME }}:latest
          
          # Vérification que le conteneur fonctionne
          echo "✅ [8/8] Vérification du déploiement..."
          sleep 15
          
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "✅ Conteneur démarré avec succès"
            docker logs --tail=20 ${{ env.CONTAINER_NAME }}
          else
            echo "❌ Échec du démarrage du conteneur"
            docker logs ${{ env.CONTAINER_NAME }} || true
            exit 1
          fi
          
          # Test de connectivité avec vos routes API
          echo "🔍 Test de connectivité sur l'API..."
          sleep 5
          if curl -f -s --max-time 10 http://localhost:${{ env.PORT }}/api/ > /dev/null 2>&1; then
            echo "✅ API accessible sur /api/"
          else
            echo "⚠️  Test de connectivité - vérification manuelle nécessaire"
            echo "Status du conteneur: $(docker ps --filter name=${{ env.CONTAINER_NAME }} --format 'table {{.Status}}')"
          fi
          
          echo "🎉 Déploiement terminé avec succès !"
          EOF

      - name: 🔧 Configure NGINX
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          PROJECT_DIR=~/tts-medical-management
          
          # Vérifier plusieurs emplacements possibles pour la config NGINX
          NGINX_CONFIG=""
          if [ -f "$PROJECT_DIR/nginx/tts-medical.conf" ]; then
            NGINX_CONFIG="$PROJECT_DIR/nginx/tts-medical.conf"
          elif [ -f "$PROJECT_DIR/api/nginx.conf" ]; then
            NGINX_CONFIG="$PROJECT_DIR/api/nginx.conf"
          elif [ -f "$PROJECT_DIR/tts-medical.conf" ]; then
            NGINX_CONFIG="$PROJECT_DIR/tts-medical.conf"
          fi
          
          if [ -n "$NGINX_CONFIG" ]; then
            echo "🔧 Configuration NGINX trouvée: $NGINX_CONFIG"
            
            # Créer le répertoire nginx s'il n'existe pas
            sudo mkdir -p /etc/nginx/sites-available
            sudo mkdir -p /etc/nginx/sites-enabled
            
            # Copier la configuration
            sudo cp "$NGINX_CONFIG" /etc/nginx/sites-available/tts-medical.conf
            
            # Créer le lien symbolique
            sudo ln -sf /etc/nginx/sites-available/tts-medical.conf /etc/nginx/sites-enabled/tts-medical.conf
            
            # Supprimer la config par défaut si elle existe
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test de la configuration NGINX
            echo "🧪 Test de la configuration NGINX..."
            if sudo nginx -t; then
              echo "✅ Configuration NGINX valide"
              sudo systemctl reload nginx
              echo "✅ NGINX rechargé avec succès"
              
              # Vérifier le status de NGINX
              if sudo systemctl is-active nginx > /dev/null; then
                echo "✅ NGINX est actif et fonctionne"
              else
                echo "❌ Problème avec NGINX"
                sudo systemctl status nginx
              fi
            else
              echo "❌ Erreur dans la configuration NGINX"
              sudo nginx -t 2>&1
              echo "⚠️  Continuité du déploiement sans rechargement NGINX"
            fi
          else
            echo "⚠️  Aucun fichier de configuration NGINX trouvé"
            echo "📂 Contenu du répertoire projet:"
            ls -la $PROJECT_DIR/
            if [ -d "$PROJECT_DIR/nginx" ]; then
              echo "📂 Contenu du répertoire nginx:"
              ls -la $PROJECT_DIR/nginx/
            fi
          fi
          EOF

      - name: 🧹 Cleanup old images
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          echo "🧹 Nettoyage des anciennes images..."
          # Garder seulement les 3 dernières images
          docker images ${{ env.IMAGE_NAME }} --format "{{.Tag}}" | grep -E '^[0-9]{8}-[0-9]{6}$' | sort -r | tail -n +4 | xargs -r -I {} docker rmi ${{ env.IMAGE_NAME }}:{} || true
          
          # Nettoyage général mais conservateur
          docker system prune -f
          echo "✅ Nettoyage terminé"
          EOF

      - name: 📊 Deployment Summary
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          echo "📊 RÉSUMÉ DU DÉPLOIEMENT"
          echo "======================="
          echo "🐳 Conteneur: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep ${{ env.CONTAINER_NAME }})"
          echo "💾 Utilisation mémoire: $(docker stats --no-stream --format '{{.MemUsage}}' ${{ env.CONTAINER_NAME }})"
          echo "📈 CPU: $(docker stats --no-stream --format '{{.CPUPerc}}' ${{ env.CONTAINER_NAME }})"
          echo "🏷️  Image: $(docker images ${{ env.IMAGE_NAME }}:latest --format '{{.Size}}')"
          echo "⏰ Temps de démarrage: $(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.State.StartedAt}}')"
          echo ""
          echo "🌐 URLs à tester:"
          echo "   - API: http://collection.urmaphalab.com/api/"
          echo "   - HTTPS: https://collection.urmaphalab.com/api/"
          EOF

      - name: 🔔 Notify deployment status
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Déploiement réussi sur ${{ secrets.VPS_HOST }}"
            echo "🚀 Application accessible sur le port ${{ env.PORT }}"
          else
            echo "❌ Échec du déploiement"
            exit 1
          fi





# name: Deploy TTS Medical API to VPS

# on:
#   push:
#     branches: [main]
#     paths:
#       - 'api/**'
#       - '.github/workflows/**'
#   pull_request:
#     branches: [main]
#     paths:
#       - 'api/**'

# env:
#   IMAGE_NAME: tts-medical-api
#   CONTAINER_NAME: tts-medical-backend
#   PORT: 3000

# jobs:
#   # Job de test avant déploiement
#   test:
#     name: 🧪 Run Tests
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
    
#     steps:
#       - name: 📂 Checkout repository
#         uses: actions/checkout@v4

#       - name: 🔧 Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#           cache: 'npm'
#           cache-dependency-path: 'api/package-lock.json'

#       - name: 📦 Install dependencies
#         working-directory: ./api
#         run: npm ci

#       - name: 🏗️ Build TypeScript
#         working-directory: ./api
#         run: npm run build

#       - name: 🧪 Run tests
#         working-directory: ./api
#         run: npm test

#       - name: 🐳 Test Docker build
#         working-directory: ./api
#         run: |
#           docker build --target production -t ${{ env.IMAGE_NAME }}:test .
#           docker run --rm -d --name test-container ${{ env.IMAGE_NAME }}:test
#           sleep 5
#           docker stop test-container || true

#   # Job de déploiement
#   deploy:
#     name: 🚀 Deploy to VPS
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#       - name: 📂 Checkout repository
#         uses: actions/checkout@v4

#       - name: 🔐 Setup SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.VPS_URMAPHA_PRIVATE_SSH }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

#       - name: 🧪 Test SSH Connection
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo '✅ SSH connection successful'"

#       - name: 📦 Deploy application
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           set -e
          
#           echo "🚀 [1/8] Préparation du déploiement..."
#           PROJECT_DIR=~/tts-medical-management
          
#           # Créer le répertoire et cloner/mettre à jour le projet
#           echo "📦 [2/8] Mise à jour du code source..."
#           if [ ! -d "$PROJECT_DIR" ]; then
#             git clone https://github.com/AInelo/tts-medical-management.git $PROJECT_DIR
#           else
#             cd $PROJECT_DIR && git pull origin main
#           fi
          
#           cd $PROJECT_DIR/api
          
#           # Backup de l'ancien conteneur (au cas où)
#           echo "💾 [3/8] Sauvegarde de l'ancien conteneur..."
#           if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
#             docker commit ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S) || true
#           fi
          
#           # Build de la nouvelle image avec cache
#           echo "🐳 [4/8] Construction de l'image Docker..."
#           docker build \
#             --target production \
#             --tag ${{ env.IMAGE_NAME }}:latest \
#             --tag ${{ env.IMAGE_NAME }}:$(date +%Y%m%d-%H%M%S) \
#             .
          
#           # Test de l'image avant déploiement
#           echo "🧪 [5/8] Test de la nouvelle image..."
#           docker run --rm --name ${{ env.CONTAINER_NAME }}-test \
#             -e NODE_ENV=production \
#             ${{ env.IMAGE_NAME }}:latest node -e "console.log('✅ Image test successful')" || {
#             echo "❌ Test de l'image échoué"
#             exit 1
#           }
          
#           # Arrêt propre de l'ancien conteneur
#           echo "🛑 [6/8] Arrêt de l'ancien conteneur..."
#           if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
#             docker stop ${{ env.CONTAINER_NAME }} || true
#             sleep 2
#           fi
#           docker rm ${{ env.CONTAINER_NAME }} || true
          
#           # Démarrage du nouveau conteneur
#           echo "🚀 [7/8] Démarrage du nouveau conteneur..."
#           docker run -d \
#             --name ${{ env.CONTAINER_NAME }} \
#             -p ${{ env.PORT }}:${{ env.PORT }} \
#             --restart unless-stopped \
#             --memory="512m" \
#             --cpus="0.5" \
#             -e NODE_ENV=production \
#             -e PORT=${{ env.PORT }} \
#             ${{ env.IMAGE_NAME }}:latest
          
#           # Vérification que le conteneur fonctionne
#           echo "✅ [8/8] Vérification du déploiement..."
#           sleep 10
          
#           if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
#             echo "✅ Conteneur démarré avec succès"
#             docker logs --tail=10 ${{ env.CONTAINER_NAME }}
#           else
#             echo "❌ Échec du démarrage du conteneur"
#             docker logs ${{ env.CONTAINER_NAME }} || true
#             exit 1
#           fi
          
#           # Test de connectivité
#           echo "🔍 Test de connectivité..."
#           if curl -f -s --max-time 10 http://localhost:${{ env.PORT }}/ > /dev/null 2>&1; then
#             echo "✅ API accessible"
#           else
#             echo "⚠️  API non accessible sur la route / (normal si pas de route définie)"
#           fi
          
#           echo "🎉 Déploiement terminé avec succès !"
#           EOF

#       - name: 🔧 Configure NGINX (if needed)
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           if [ -f ~/tts-medical-management/nginx/tts-medical.conf ]; then
#             echo "🔧 Configuration NGINX..."
            
#             sudo cp ~/tts-medical-management/nginx/tts-medical.conf /etc/nginx/sites-available/tts-medical.conf
#             sudo ln -sf /etc/nginx/sites-available/tts-medical.conf /etc/nginx/sites-enabled/tts-medical.conf
            
#             # Test de la configuration NGINX
#             if sudo nginx -t; then
#               sudo systemctl reload nginx
#               echo "✅ NGINX rechargé avec succès"
#             else
#               echo "❌ Erreur dans la configuration NGINX"
#               exit 1
#             fi
#           else
#             echo "⚠️  Fichier de configuration NGINX non trouvé"
#           fi
#           EOF

#       - name: 🧹 Cleanup old images
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           echo "🧹 Nettoyage des anciennes images..."
#           # Garder seulement les 3 dernières images
#           docker images ${{ env.IMAGE_NAME }} --format "{{.Tag}}" | grep -E '^[0-9]{8}-[0-9]{6}$' | sort -r | tail -n +4 | xargs -r -I {} docker rmi ${{ env.IMAGE_NAME }}:{} || true
          
#           # Nettoyage général
#           docker system prune -f --volumes
#           echo "✅ Nettoyage terminé"
#           EOF

#       - name: 📊 Deployment Summary
#         run: |
#           ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
#           echo "📊 RÉSUMÉ DU DÉPLOIEMENT"
#           echo "======================="
#           echo "🐳 Conteneur: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep ${{ env.CONTAINER_NAME }})"
#           echo "💾 Utilisation mémoire: $(docker stats --no-stream --format '{{.MemUsage}}' ${{ env.CONTAINER_NAME }})"
#           echo "📈 CPU: $(docker stats --no-stream --format '{{.CPUPerc}}' ${{ env.CONTAINER_NAME }})"
#           echo "🏷️  Image: $(docker images ${{ env.IMAGE_NAME }}:latest --format '{{.Size}}')"
#           echo "⏰ Temps de démarrage: $(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.State.StartedAt}}')"
#           EOF

#       - name: 🔔 Notify deployment status
#         if: always()
#         run: |
#           if [ $? -eq 0 ]; then
#             echo "✅ Déploiement réussi sur ${{ secrets.VPS_HOST }}"
#           else
#             echo "❌ Échec du déploiement"
#             exit 1
#           fi


# # name: Deploy Backend to VPS

# # on:
# #   push:
# #     branches: [main]

# # jobs:
# #   deploy:
# #     name: Deploy to VPS
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: 📂 Checkout repository
# #         uses: actions/checkout@v3

# #       - name: 🔐 Write SSH private key
# #         run: |
# #           echo "${{ secrets.VPS_URMAPHA_PRIVATE_SSH }}" > key.pem
# #           chmod 600 key.pem
      
# #       - name: 🧪 Test SSH Connection
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

# #       - name: 📦 Clone or update project
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
# #           echo "[1/6] 📦 Cloner le projet ou mettre à jour..."
# #           mkdir -p ~/collection_audios && cd ~/collection_audios
# #           if [ ! -d ".git" ]; then
# #             git clone https://github.com/AInelo/tts-medical-management.git .
# #           else
# #             git pull
# #           fi
# #           EOF

# #       - name: 🐳 Build Docker image
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
# #           echo "[2/6] 🐳 Construire l'image Docker..."
# #           cd ~/collection_audios/api
# #           docker build -t collection_audios_backend .
# #           EOF

# #       - name: 🧼 Clean old container
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
# #           echo "[3/6] 🧼 Nettoyage ancien conteneur..."
# #           docker stop collection_audios_backend || true
# #           docker rm collection_audios_backend || true
# #           EOF

# #       - name: 🚀 Run new container
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
# #           echo "[4/6] 🚀 Lancer le conteneur..."
# #           docker run -d \
# #             --name collection_audios_backend \
# #             -p 3000:3000 \
# #             --restart unless-stopped \
# #             collection_audios_backend
# #           EOF

# #       - name: 🔧 Configure NGINX
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
# #           echo "[5/6] 🔧 Configurer NGINX..."
# #           sudo cp ~/collection_audios/urmaphalab/collection.urmapha.com /etc/nginx/sites-available/collection.urmapha.com
# #           sudo ln -sf /etc/nginx/sites-available/collection.urmapha.com /etc/nginx/sites-enabled/collection.urmapha.com
# #           sudo nginx -t && sudo systemctl reload nginx
# #           EOF

# #       - name: 🔐 Setup SSL with Certbot
# #         run: |
# #           ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
# #           echo "[6/6] 🔐 Installer SSL avec Certbot..."
# #           sudo apt update
# #           sudo apt install -y certbot python3-certbot-nginx
# #           sudo certbot --nginx --non-interactive --agree-tos --email your@email.com -d collection.urmaphalab.com
# #           echo "✅ Déploiement terminé avec succès !"
# #           EOF